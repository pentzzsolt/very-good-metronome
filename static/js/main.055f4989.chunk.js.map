{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","handleChange","event","setState","tempo","parseInt","target","value","handleTimeSignatureChange","timeSignature","handleClick","interval","state","playing","window","clearInterval","count","setInterval","increaseCount","render","htmlFor","onChange","id","onClick","type","min","max","step","split","undefined","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kQA8EeA,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAUQC,aAAe,SAACC,GAC9B,EAAKC,SAAS,CACZC,MAAOC,SAASH,EAAMI,OAAOC,UAbd,EAiBHC,0BAA4B,SAACN,GAC3C,EAAKC,SAAS,CACZM,cAAeP,EAAMI,OAAOC,SAnBb,EAuBHG,YAAc,WAC5B,IAAIC,EACA,EAAKC,MAAMC,SACbC,OAAOC,cAAc,EAAKH,MAAMD,UAChC,EAAKR,SAAS,CACZa,MAAO,KAGTL,EAAWG,OAAOG,YAAY,EAAKC,cAAe,GAAK,EAAKN,MAAMR,MAAQ,KAE5E,EAAKD,SAAS,CACZQ,SAAUA,EACVE,SAAU,EAAKD,MAAMC,WAnCN,EAuCHM,OAAS,WACvB,OACE,gCACE,6BAAK,EAAKP,MAAMI,QAChB,uBAAOI,QAAQ,gBAAf,4BACA,yBAAQC,SAAU,EAAKb,0BAA2BD,MAAO,EAAKK,MAAMH,cAAea,GAAG,gBAAtF,UACE,wBAAQf,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,oBAEF,wBAAQgB,QAAS,EAAKb,YAAtB,SAAoC,EAAKE,MAAMC,QAAU,OAAS,UAClE,wBAAOO,QAAQ,QAAf,oBAA+B,EAAKR,MAAMR,SAC1C,uBAAOkB,GAAG,QAAQE,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAML,SAAU,EAAKpB,aAAcM,MAAO,EAAKK,MAAMR,MAAOuB,KAAK,UAnDhG,EAwDFT,cAAgB,WAC/B,IAAMF,EAAQ,EAAKJ,MAAMH,cAAcmB,MAAM,KAC7C,EAAKzB,SAAS,CACZa,MAAO,EAAKJ,MAAMI,MAAQX,SAASW,EAAM,IAAM,KAzDjD,EAAKJ,MAAQ,CACXI,MAAO,EACPL,cAAUkB,EACVhB,SAAS,EACTT,MAAO,GACPK,cAAe,OAPA,E,UADHqB,IAAMC,WCCTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAStB,OACP,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.055f4989.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\ntype Props = {};\r\n\r\ntype State = {\r\n  count: number,\r\n  interval: number | undefined,\r\n  playing: boolean,\r\n  tempo: number,\r\n  timeSignature: string\r\n};\r\n\r\nclass App extends React.Component<Props, State> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 1,\r\n      interval: undefined,\r\n      playing: false,\r\n      tempo: 60,\r\n      timeSignature: \"4/4\"\r\n    };\r\n  };\r\n\r\n  public readonly handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    this.setState({\r\n      tempo: parseInt(event.target.value)\r\n    });\r\n  };\r\n\r\n  public readonly handleTimeSignatureChange = (event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n    this.setState({\r\n      timeSignature: event.target.value\r\n    });\r\n  };\r\n\r\n  public readonly handleClick = (): void => {\r\n    let interval;\r\n    if (this.state.playing) {\r\n      window.clearInterval(this.state.interval);\r\n      this.setState({\r\n        count: 1\r\n      });\r\n    } else {\r\n      interval = window.setInterval(this.increaseCount, 60 / this.state.tempo * 1000);\r\n    };\r\n    this.setState({\r\n      interval: interval,\r\n      playing: !this.state.playing\r\n    });\r\n  };\r\n\r\n  public readonly render = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.count}</h1>\r\n        <label htmlFor=\"timeSignature\">Time signature</label>\r\n        <select onChange={this.handleTimeSignatureChange} value={this.state.timeSignature} id=\"timeSignature\">\r\n          <option value=\"2/4\">2/4</option>\r\n          <option value=\"3/4\">3/4</option>\r\n          <option value=\"4/4\">4/4</option>\r\n        </select>\r\n        <button onClick={this.handleClick}>{this.state.playing ? \"Stop\" : \"Start\"}</button>\r\n        <label htmlFor=\"tempo\">Tempo: {this.state.tempo}</label>\r\n        <input id=\"tempo\" type=\"range\" min=\"30\" max=\"200\" onChange={this.handleChange} value={this.state.tempo} step=\"1\"></input>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private readonly increaseCount = (): void => {\r\n    const count = this.state.timeSignature.split(\"/\");\r\n    this.setState({\r\n      count: this.state.count % parseInt(count[0]) + 1\r\n    });\r\n  };\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}